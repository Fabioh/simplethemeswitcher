{"version":3,"sources":["utils/usePersistedState.ts","styles/themes/light.ts","styles/themes/dark.ts","styles/global.ts","components/Header/styles.ts","components/Header/index.tsx","App.tsx","index.tsx"],"names":["usePersistedState","key","initialState","useState","storageValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","title","colors","primary","secundary","background","text","createGlobalStyle","props","theme","Container","styled","div","Header","toggleTheme","useContext","ThemeContext","onChange","checked","checkedIcon","uncheckedIcon","height","width","handleDiameter","offColor","shade","onColor","App","light","setTheme","className","dark","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAwBeA,MAjBf,SAA8BC,EAAaC,GAAgC,IAAD,EAC5CC,oBAAS,WAC/B,IAAMC,EAAeC,aAAaC,QAAQL,GAE1C,OAAIG,EACOG,KAAKC,MAAMJ,GAEXF,KAPuD,mBAC/DO,EAD+D,KACxDC,EADwD,KActE,OAHAC,qBAAU,WACNN,aAAaO,QAAQX,EAAKM,KAAKM,UAAUJ,MAC1C,CAACR,EAAKQ,IACF,CAACA,EAAOC,ICrBJ,GACXI,MAAO,QAEPC,OAAQ,CACJC,QAAS,UACTC,UAAW,UAEXC,WAAY,UACZC,KAAM,SCRC,GACXL,MAAO,OAEPC,OAAQ,CACJC,QAAS,OACTC,UAAW,UAEXC,WAAY,OACZC,KAAM,S,wSCNCC,kBAAf,KAQsB,SAAAC,GAAK,OAAIA,EAAMC,MAAMP,OAAOG,cAEjC,SAAAG,GAAK,OAAIA,EAAMC,MAAMP,OAAOI,Q,oQCVtC,IAAMI,EAAYC,IAAOC,IAAV,KAEJ,SAAAJ,GAAK,OAAIA,EAAMC,MAAMP,OAAOC,WC4B/BU,EArBkB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACxBC,qBAAWC,KAA7Bd,EAD0C,EAC1CA,OAAQD,EADkC,EAClCA,MAEhB,OACI,kBAACS,EAAD,kBAEI,kBAAC,IAAD,CACIO,SAAUH,EACVI,QAAmB,SAAVjB,EACTkB,aAAa,EACbC,eAAe,EACfC,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,SAAUC,YAAM,IAAMvB,EAAOC,SAC7BuB,QAASxB,EAAOE,cCCjBuB,MAjBf,WAAgB,IAAD,EACaxC,EAAgC,QAASyC,GADtD,mBACNnB,EADM,KACCoB,EADD,KAOb,OACE,kBAAC,IAAD,CAAepB,MAAOA,GACpB,yBAAKqB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQhB,YARM,WAClBe,EAAyB,UAAhBpB,EAAMR,MAAoB8B,EAAOH,SCV9CI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ef050838.chunk.js","sourcesContent":["import { useState, useEffect, Dispatch, SetStateAction } from 'react';\r\n\r\ntype Response<T> = [\r\n    T,\r\n    Dispatch<SetStateAction<T>> \r\n]\r\n\r\nfunction usePersistedState<T>(key: string, initialState: T) : Response<T> {\r\n    const [state, setState] = useState(() => {\r\n        const storageValue = localStorage.getItem(key);\r\n\r\n        if (storageValue) {\r\n            return JSON.parse(storageValue)\r\n        } else {\r\n            return initialState;\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state]);\r\n    return [state, setState];\r\n}\r\n\r\nexport default usePersistedState;\r\n","export default {\r\n    title: 'light',\r\n\r\n    colors: {\r\n        primary: '#C62E65',\r\n        secundary: '#D63AF9',\r\n\r\n        background: '#F5F5F5',\r\n        text: '#333' \r\n    }\r\n};\r\n","export default {\r\n    title: 'dark',\r\n\r\n    colors: {\r\n        primary: '#333',\r\n        secundary: '#C62E65',\r\n\r\n        background: '#222',\r\n        text: '#fff' \r\n    }\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        background: ${props => props.theme.colors.background};\r\n        font-size: 14px;\r\n        color: ${props => props.theme.colors.text};\r\n        font-family: sans-serify\r\n    }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    height: 60px;\r\n    background: ${props => props.theme.colors.primary};\r\n    color: #FFF;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 30px;\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport Switch from 'react-switch';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\nimport { Container} from './styles';\r\n\r\ninterface IProps {\r\n    toggleTheme(): void\r\n}\r\n\r\nconst Header: React.FC<IProps> = ({ toggleTheme }) => {\r\n    const { colors, title } = useContext(ThemeContext);\r\n\r\n    return (\r\n        <Container>\r\n            Hello Word\r\n            <Switch\r\n                onChange={toggleTheme}\r\n                checked={title === 'dark'}\r\n                checkedIcon={false}\r\n                uncheckedIcon={false}\r\n                height={10}\r\n                width={40}\r\n                handleDiameter={20}\r\n                offColor={shade(0.15, colors.primary)}\r\n                onColor={colors.secundary}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport { ThemeProvider, DefaultTheme } from 'styled-components';\nimport usePersistedState from './utils/usePersistedState';\n\nimport light from './styles/themes/light';\nimport dark from './styles/themes/dark';\n\nimport GlobalStyle from './styles/global';\nimport Header from './components/Header';\n\nfunction App() {\n  const [theme, setTheme] = usePersistedState<DefaultTheme>('theme', light);\n\n  const toggleTheme = () => {\n    setTheme(theme.title === 'light' ? dark : light);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <GlobalStyle />\n        <Header toggleTheme={toggleTheme}/>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}